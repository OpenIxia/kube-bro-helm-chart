apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "bro.fullname" . }}-logstash-pipeline
  labels:
    app: {{ template "bro.name" . }}
    chart: {{ template "bro.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  logstash.conf: |
    # Bro-IDS Logstash parser
    # Parts of this taken from http://www.appliednsm.com/wp-content/uploads/logstash-SObro22-parse.conf_.txt

    #Logs being parsed:
    #app_stats.log
    #conn.log
    #dns.log
    #dpd.log
    #files.log
    #http.log
    #notice.log
    #software.log
    #dhcp.log
    #known_certs.log
    #known_hosts.log
    #known_services.log
    #ssh.log
    #ssl.log
    #weird.log

    input {

    #Production Logs#############################
      file {
        type => "BRO_httplog"
        path => "/logs/http.log"
        sincedb_path => "/tmp/.bro_http_sincedb"
      }
      file {
        type => "BRO_known_certslog"
        path => "/logs/known_certs.log"
        sincedb_path => "/tmp/.bro_known_certs_sincedb"
      }
      file {
        type => "BRO_noticelog"
        path => "/logs/notice.log"
        sincedb_path => "/tmp/.bro_notice_sincedb"
      }
      file {
        type => "BRO_known_hostslog"
        path => "/logs/known_hosts.log"
        sincedb_path => "/tmp/.bro_known_hosts_sincedb"
      }
      file {
        type => "BRO_known_serviceslog"
        path => "/logs/known_services.log"
        sincedb_path => "/tmp/.bro_known_services_sincedb"
      }
      file {
        type => "BRO_sshlog"
        path => "/logs/ssh.log"
        sincedb_path => "/tmp/.bro_ssh_sincedb"
      }
      file {
        type => "BRO_dpdlog"
        path => "/logs/dpd.log"
        sincedb_path => "/tmp/.bro_dpd_sincedb"
      }
      file {
        type => "BRO_connlog"
        path => "/logs/conn.log"
        sincedb_path => "/tmp/.bro_conn_sincedb"
      }
      file {
        type => "BRO_weirdlog"
        path => "/logs/weird.log"
        sincedb_path => "/tmp/.bro_weird_sincedb"
      }
      file {
        type => "BRO_app_statslog"
        path => "/logs/appstats.log"
        sincedb_path => "/tmp/.bro_appstats_sincedb"
      }
      file {
        type => "BRO_dhcplog"
        path => "/logs/dhcp.log"
        sincedb_path => "/tmp/.bro_dhcp_sincedb"
      }
      file {
        type => "BRO_fileslog"
        path => "/logs/files.log"
        sincedb_path => "/tmp/.bro_files_sincedb"
      }
      file {
        type => "BRO_ssllog"
        path => "/logs/ssl.log"
        sincedb_path => "/tmp/.bro_ssl_sincedb"
      }
      file {
        type => "BRO_noticelog"
        path => "/logs/notice.log"
        sincedb_path => "/tmp/.bro_notice_sincedb"
      }
      file {
        type => "BRO_softwarelog"
        path => "/logs/software.log"
        sincedb_path => "/tmp/.bro_software_sincedb"
      }
      file {
        type => "BRO_dnslog"
        path => "/logs/dns.log"
        sincedb_path => "/tmp/.bro_dns_sincedb"
      }
      file {
        type => "BRO_intellog"
        path => "/logs/intel.log"
        sincedb_path => "/tmp/.bro_intel_sincedb"
      }
    }

    filter {
      if [message] =~ /^#/ {
        drop {  }
        }
        else {
       
        # BRO_app_statslog ######################
          if [type] == "BRO_app_statslog" {
            csv {
              columns => ["ts", "ts_delta", "app", "uniq_hosts", "hits", "bytes" ]
              separator => "	"
            }
          }
        
        # BRO_connlog ######################
          if [type] == "BRO_connlog" {
            csv {
              columns => ["ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "proto", "service", "duration", "orig_bytes", "resp_bytes", "conn_state", "local_orig", "local_resp", "missed_bytes", "history", "orig_pkts", "orig_ip_bytes", "resp_pkts", "resp_ip_bytes", "tunnel_parents", "orig_cc", "resp_cc", "sensorname"]
              skip_empty_columns => true
              separator => "	"
            }
          }
        
        # BRO_noticelog ######################
          if [type] == "BRO_noticelog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "fuid", "file_mime_type", "file_desc", "proto", "note", "msg", "sub", "src", "dst", "p", "n", "peer_descr", "actions", "suppress_for", "dropped", "remote_location.country_code", "remote_location.region", "remote_location.city", "remote_location.latitude", "remote_location.longitude" ]
              separator => "	"
            }
          }
        
        
        # BRO_dhcplog ######################
          if [type] == "BRO_dhcplog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "mac", "assigned_ip", "lease_time", "trans_id" ]
              separator => "	"
            }
          }
        
        # BRO_dnslog ######################
          if [type] == "BRO_dnslog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "proto", "trans_id", "rtt", "query", "qclass", "qclass_name", "qtype", "qtype_name", "rcode", "rcode_name", "AA", "TC", "RD", "RA", "Z", "answers", "TTLs", "rejected" ]
              separator => "	"
            }
          }
        
        # BRO_softwarelog ######################
          if [type] == "BRO_softwarelog" {
            csv {
              columns => [ "ts", "bro_host", "host_p", "software_type", "name", "version.major", "version.minor", "version.minor2", "version.minor3", "version.addl", "unparsed_version" ]
              separator => "	"
            }
          }
        
        # BRO_dpdlog ######################
          if [type] == "BRO_dpdlog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "proto", "analyzer", "failure_reason" ]
              separator => "	"
            }
          }
        
        # BRO_fileslog ######################
          if [type] == "BRO_fileslog" {
            csv {
              columns => [ "ts", "fuid", "tx_hosts", "rx_hosts", "conn_uids", "source", "depth", "analyzers", "mime_type", "filename", "duration", "local_orig", "is_orig", "seen_bytes", "total_bytes", "missing_bytes", "overflow_bytes", "timedout", "parent_fuid", "md5", "sha1", "sha256", "extracted", "extracted_cutoff", "extracted_size" ]
              separator => "	"
            }
          }
        
        # BRO_httplog ######################
          if [type] == "BRO_httplog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "trans_depth", "method", "bro_host", "uri", "referrer", "version", "user_agent", "request_body_len", "response_body_len", "status_code", "status_msg", "info_code", "info_msg", "http_tags", "username", "password", "proxied", "orig_fuids", "orig_filenames", "orig_mime_types", "resp_fuids", "resp_filenames", "resp_mime_types" ]
              separator => "	"
              quote_char => "`"
            }
          }
        
        # BRO_known_certslog ######################
          if [type] == "BRO_known_certslog" {
            csv {
              columns => [ "ts", "bro_host", "port_num", "subject", "issuer_subject", "serial" ]
              separator => "	"
            }
          }
        
        # BRO_known_hostslog ######################
          if [type] == "BRO_known_hostslog" {
            csv {
              columns => [ "ts", "bro_host" ]
              separator => "	"
            }
          }
        
        # BRO_known_serviceslog ######################
          if [type] == "BRO_known_serviceslog" {
            csv {
              columns => [ "ts", "bro_host", "port_num", "port_proto", "service" ]
              separator => "	"
            }
          }
        
        # BRO_sshlog ######################
          if [type] == "BRO_sshlog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "version", "auth_success", "auth_attempts", "direction", "client", "server", "cipher_alg", "mac_alg", "compression_alg", "kex_alg", "host_key_alg", "host_key", "remote_location.country_code", "remote_location.region", "remote_location.city", "remote_location.latitude", "remote_location.longitude" ]
              separator => "	"
            }
          }
        
        # BRO_ssllog ######################
          if [type] == "BRO_ssllog" {
            csv {
              columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "version", "cipher", "curve", "server_name", "resumed", "last_alert", "next_protocol", "established", "cert_chain_fuids", "client_cert_chain_fuids", "subject", "issuer_subject", "client_subject", "client_issuer_subject", "validation_status"]
              separator => "	"
            }
          }
        
        # BRO_weirdlog ######################
        if [type] == "BRO_weirdlog" {
          csv {
            columns => [ "ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "name", "addl", "notice", "peer" ]
            separator => "	"
          }
        }
        if [type]== "BRO_intellog" {
          grok {
            match => [ "message", "(?<ts>(.*?))\t%{DATA:uid}\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t%{DATA:fuid}\t%{DATA:file_mime_type}\t%{DATA:file_desc}\t(?<seen.indicator>(.*?))\t(?<seen.indicator_type>(.*?))\t(?<seen.where>(.*?))\t%{NOTSPACE:sources}" ]
         }
       }
      }
      date {
        match => [ "ts", "UNIX" ]
      }
    }
    filter {
      if [bro_host] {
        mutate {
          replace => [ "host", "%{bro_host}" ]
        }
      }
    }
    filter {
      if "BRO" in [type] {
        if [id.orig_h] {
          mutate {
            add_field => [ "senderbase_lookup", "http://www.senderbase.org/lookup/?search_string=%{id.orig_h}" ]
            add_field => [ "CBL_lookup", "http://cbl.abuseat.org/lookup.cgi?ip=%{id.orig_h}" ]
            add_field => [ "Spamhaus_lookup", "http://www.spamhaus.org/query/bl?ip=%{id.orig_h}" ]
          }
        }
        mutate {
          add_tag => [ "BRO" ]
        }
        mutate {
          convert => {
            "id.orig_p" => "integer"
            "id.resp_p" => "integer"
            "overflow_bytes" => "integer"
            "orig_bytes" => "integer"
            "resp_bytes" => "integer"
            "missed_bytes" => "integer"
            "seen_bytes" => "integer"
            "total_bytes" => "integer"
            "orig_pkts" => "integer"
            "orig_ip_bytes" => "integer"
            "resp_pkts" => "integer"
            "resp_ip_bytes" => "integer"
            "response_body_len" => "integer"
            "extracted_size" => "integer"
            "duration" => "float"
            "RA" => "boolean"
            "RD" => "boolean"
            "TX" => "boolean"
            "Z" => "boolean"
            "is_orig" => "boolean"
            "timedout" => "boolean"
            "extracted_cutoff" => "boolean"
            "resumed" => "boolean"
          }
        }
      }
    }
    filter {
      if [type] == "BRO_connlog" {
        #The following makes use of the translate filter (logstash contrib) to convert conn_state into human text. Saves having to look up values for packet introspection
        translate {
          field => "conn_state"
          destination => "conn_state_full"
          dictionary => [ 
            "S0", "Connection attempt seen, no reply",
            "S1", "Connection established, not terminated",
            "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
            "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
            "SF", "Normal SYN/FIN completion",
            "REJ", "Connection attempt rejected",
            "RSTO", "Connection established, originator aborted (sent a RST)",
            "RSTR", "Established, responder aborted",
            "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
            "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
            "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
            "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
            "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)" 
          ]
        }
      }
    }
    # Resolve @source_host to FQDN if possible if missing for some types of logging using source_host_ip from above
    # Note: doing so adds a delay for every entry and may not be practical for
    # busy hosts.
    #filter {
    #  if [id.orig_h] {
    #    if ![id.orig_h-resolved] {
    #      mutate {
    #        add_field => [ "id.orig_h-resolved", "%{id.orig_h}" ]
    #      }
    #      dns {
    #        reverse => [ "id.orig_h-resolved" ]
    #        action => "replace"
    #      }
    #    }
    #  }
    #}
    #filter {
    #  if [id.resp_h] {
    #    if ![id.resp_h-resolved] {
    #      mutate {
    #        add_field => [ "id.resp_h-resolved", "%{id.resp_h}" ]
    #      }
    #      dns {
    #        reverse => [ "id.resp_h-resolved" ]
    #        action => "replace"
    #      }
    #    }
    #  }
    #}

    output { 
      elasticsearch { 
        hosts => [ "{{- .Values.elasticsearch.url -}}" ]
        index => "bro-%{+YYYY.MM.dd}"
      } 
    }
